/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.wit.gui;

import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piotr Bródka
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        this.dataModel = (DefaultTableModel) studentsTable.getModel();
      
        //Listener do dynamicznego wyliczania sumy punktów
        studentsTable.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent tme) {
                if (tme.getType() == TableModelEvent.UPDATE) {
                   if (tme.getColumn()!=9) { 
                         int currentRow = studentsTable.getSelectedRow();
                         if(validator(currentRow, tme.getColumn()) != true){
                            JOptionPane.showMessageDialog(null, validationFailMessage(tme.getColumn()),"Błąd walidacji",JOptionPane.ERROR_MESSAGE);
                         }
                         dataModel.setValueAt(pointsSum(currentRow), studentsTable.getSelectedRow() , 9);
                   }             
                }    
            }
        }); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        uploadFile = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        studentsTable = new javax.swing.JTable();
        addRow = new javax.swing.JButton();
        removeRow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dane studentów");

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        uploadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/upload.png"))); // NOI18N
        uploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileActionPerformed(evt);
            }
        });

        studentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nr albumu", "Osoba", "Grupa", "Praca domowa", "Aktywność", "Projekt", "Kolokwium 1", "Kolokwium 2", "Egzamin", "Suma"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePane.setViewportView(studentsTable);

        addRow.setText("+");
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });

        removeRow.setText("-");
        removeRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 919, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeRow))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(uploadFile)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(uploadFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRow)
                    .addComponent(removeRow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //dodanie wiersza w tabeli
    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed
        if(this.studentsTable.getRowCount() == 0 || isAnyNull(this.studentsTable.getRowCount() - 1)){
           dataModel.addRow(new Object[] {null, null, null, null, null, null, null, null, null, null}); 
        }else{
           JOptionPane.showMessageDialog(null, validationFailMessage(10),"Błąd walidacji",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addRowActionPerformed
    
    //zapisanie danych z tabeli
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO zapisywanie danych z tabeli to pliku
    }//GEN-LAST:event_saveButtonActionPerformed

    //usunięcie wiersza z tabeli
    private void removeRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowActionPerformed
        try {
            dataModel.removeRow(studentsTable.getSelectedRow());
        } catch (Exception e) {
        }
    }//GEN-LAST:event_removeRowActionPerformed

    //upload danych z pliku
    private void uploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uploadFileActionPerformed
        
    //zliczanie sumy punktów w edytowanym wierszu
    private int pointsSum(int currentRow){
        int sum=0;
        for(int i=3; i<9;i++){
            Integer value = (Integer) this.studentsTable.getValueAt(currentRow, i);
            if(value != null){
                sum+=value;
            }
        }
        return sum;
    }
    
    //wyczyszczenie wartości w polu po wpisaniu nieprawidłowej wartości 
    private void validationFail(int currentRow, int currentCell ){
        dataModel.setValueAt(null, currentRow , currentCell);
    }
    //sprawdzenie czy którekolwiek z pól jest puste
    private boolean isAnyNull(int currentRow){
        boolean flag = true;
        for(int i=0; i<9;i++){
            if(this.studentsTable.getValueAt(currentRow, i) == null){
                flag = false;
                break;
            }
        }
        return flag;
    }
    
    //metoda zwracająca wartość komunikatu błędu
    private String validationFailMessage(int currentCell){
        String text;
        switch(currentCell){
            case(0):
                text = "Proszę wpisać same cyfry.";
                break;
            case(1):
                text = "Wartość w polu musi się składać z co najmniej dwóch wyrazów.";
                break;
            case(2):
                text = "Proszę podać numer grupy.";
                break;
            case(3):
                text = "Proszę podać wartość od 0 do 5.";
                break;
            case(4):
                text = "Proszę podać wartość od 0 do 5.";
                break;
            case(5):
                text = "Proszę podać wartość od 0 do 10.";
                break;
            case(6):
                text = "Proszę podać wartość od 0 do 20.";
                break;
            case(7):
                text = "Proszę podać wartość od 0 do 20.";
                break;
            case(8):
                text = "Proszę podać wartość od 0 do 40.";
                break;
            case(10):
                text = "Co najmniej jedno pole jest niewypełnione.\nWypełnij wszystkie pola przed dodaniem następnej pozycji.";
                break;
            case(11):
                text = "Wypełnij wszystkie pola przed zapisem danych do pliku.";
                break;
            default:
                text = "Błąd walidacji";
                break;
        }
        return text;
    }
    
    //metoda walidująca pola
    private boolean validator(int currentRow, int currentCell){
        Object value = this.studentsTable.getValueAt(currentRow, currentCell);      
          if(value == null){
            return true;
          }   
          switch(currentCell){
            case(1):
                String[] words = String.valueOf(value).split("\\s+");
                if(words.length < 2 && value != null){
                    validationFail(currentRow,currentCell);
                    return false;
                }
                return true;
            case(3):
              if((Integer) value >= 0 && (Integer) value <= 5){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
            case(4):
              if((Integer) value >= 0 && (Integer) value <= 5){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
            case(5):
              if((Integer) value >= 0 && (Integer) value <= 10){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
            case(6):
              if((Integer) value >= 0 && (Integer) value <= 20){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
            case(7):
             if((Integer) value >= 0 && (Integer) value <= 20){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
             case(8):
              if((Integer) value >= 0 && (Integer) value <= 40){
                  return true;
              }else{
                validationFail(currentRow,currentCell); 
                return false;
              }
            default:
                return true;
        } 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    //model danych do tabeli
    private  DefaultTableModel dataModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRow;
    private javax.swing.JButton removeRow;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable studentsTable;
    private javax.swing.JScrollPane tablePane;
    private javax.swing.JButton uploadFile;
    // End of variables declaration//GEN-END:variables
}
